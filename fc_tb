`timescale 1ns/1ps

module fc_tb;

  // Inputs
  reg signed [8:0] in0, in1, in2, in3;
  reg signed [8:0] w0, w1, w2, w3, w4, w5, w6, w7, w8, w9,
                  w10, w11, w12, w13, w14, w15, w16, w17, w18, w19,
                  w20, w21, w22, w23, w24, w25, w26, w27, w28, w29,
                  w30, w31, w32, w33, w34, w35, w36, w37, w38, w39,
                  b0;
  reg [7:0] iexp, wexp, bexp;

  // Outputs
  wire signed [8:0] out0, out1, out2, out3;
  wire [7:0] oexp;

  // Instantiate the Unit Under Test (UUT)
  fc uut (
    .in0(in0), .in1(in1), .in2(in2), .in3(in3),
    .w0(w0), .w1(w1), .w2(w2), .w3(w3), .w4(w4), .w5(w5), .w6(w6), .w7(w7), .w8(w8), .w9(w9),
    .w10(w10), .w11(w11), .w12(w12), .w13(w13), .w14(w14), .w15(w15), .w16(w16), .w17(w17), .w18(w18), .w19(w19),
    .w20(w20), .w21(w21), .w22(w22), .w23(w23), .w24(w24), .w25(w25), .w26(w26), .w27(w27), .w28(w28), .w29(w29),
    .w30(w30), .w31(w31), .w32(w32), .w33(w33), .w34(w34), .w35(w35), .w36(w36), .w37(w37), .w38(w38), .w39(w39),
    .b0(b0),
    .iexp(iexp), .wexp(wexp), .bexp(bexp),
    .out0(out0), .out1(out1), .out2(out2), .out3(out3),
    .oexp(oexp)
  );

  initial begin
    // Monitor outputs

    // Initialize inputs
    {in0, in1, in2, in3} = 36'h0;
    {w0, w1, w2, w3, w4, w5, w6, w7, w8, w9,
     w10, w11, w12, w13, w14, w15, w16, w17, w18, w19,
     w20, w21, w22, w23, w24, w25, w26, w27, w28, w29,
     w30, w31, w32, w33, w34, w35, w36, w37, w38, w39} = 360'h0;
    b0 = 9'h0;
    iexp = 8'd127; // Default IEEE-754 exponent for value ~1.0
    wexp = 8'd127;
    bexp = 8'd127;

    #10;
    $display("At time %t: out0=%d, out1=%d, out2=%d, out3=%d, oexp=%d",
             $time, out0, out1, out2, out3, oexp);

    // Test Case 1: Simple all ones
    in0 = 9'b0_10001000; // mantissa=1, exponent adjusted separately
    in1 = 9'b0_01001000;
    in2 = 9'b0_00101000;
    in3 = 9'b0_00011000;

    for (int i = 0; i < 40; i++) begin
      w0 = 9'b0_10000000; // All weights = 1
    end
    b0 = 9'b0_10000000; // Bias = 1

    
    #10;
    $display("At time %t: out0=%8b, out1=%8b, out2=%8b, out3=%8b, oexp=%d",
             $time, out0, out1, out2, out3, oexp);

    // Test Case 2: Input doubles
    in0 = 9'b0_00000010;
    in1 = 9'b0_00000010;
    in2 = 9'b0_00000010;
    in3 = 9'b0_00000010;

    #10;
    $display("At time %t: out0=%d, out1=%d, out2=%d, out3=%d, oexp=%d",
             $time, out0, out1, out2, out3, oexp);

    // Test Case 3: Negative input
    in0 = 9'b1_00000001; // -1
    in1 = 9'b1_00000001;
    in2 = 9'b1_00000001;
    in3 = 9'b1_00000001;

    #10;
    $display("At time %t: out0=%d, out1=%d, out2=%d, out3=%d, oexp=%d",
             $time, out0, out1, out2, out3, oexp);

    // End simulation
    $finish;
  end

endmodule
